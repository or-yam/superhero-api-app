{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","publisher","image","className","alt","src","width","height","CardList","characters","map","character","i","key","id","biography","images","md","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","children","ErrorBoundry","state","hasError","error","info","this","Component","App","useState","setCharacters","searchField","setSearchField","useEffect","fetch","then","response","json","filterCharacters","filter","toLocaleLowerCase","includes","length","event","target","value","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"iOAoBeA,EAlBF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,UAAWC,EAAY,EAAZA,MAC/B,OACE,yBAAKC,UAAU,kDACb,yBACEA,UAAU,aACVC,IAAI,UACJC,IAAKH,EACLI,MAAM,MACNC,OAAO,QAET,6BACE,4BAAMP,GACN,wBAAIG,UAAU,YAAYF,MCMnBO,EAjBE,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,WAClB,OACE,6BACGA,EAAWC,KAAI,SAACC,EAAWC,GAC1B,OACE,kBAAC,EAAD,CACEC,IAAKD,EACLE,GAAIH,EAAUG,GACdd,KAAMW,EAAUX,KAChBC,UAAWU,EAAUI,UAAUd,UAC/BC,MAAOS,EAAUK,OAAOC,UCErBC,EAbG,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACnB,OACE,yBAAKhB,UAAU,OACb,2BACEA,UAAU,2CACViB,KAAK,SACLC,YAAY,cACZC,SAAUH,MCMHI,EAbA,SAACC,GACd,OACE,yBACEC,MAAO,CACLC,SAAU,SACVnB,OAAQ,UAGTiB,EAAMG,W,4BCeEC,E,kDAtBb,WAAYJ,GAAQ,IAAD,8BACjB,cAAMA,IACDK,MAAQ,CACXC,UAAU,GAHK,E,8DAMDC,EAAOC,GACvBC,KAAKJ,MAAM,CAAEC,UAAU,M,+BAIvB,OAAIG,KAAKJ,MAAMC,SAEX,6BACE,4DAICG,KAAKT,MAAMG,a,GAnBKO,a,MCKZ,SAASC,IAAO,IAAD,EACQC,mBAAS,IADjB,mBACrB3B,EADqB,KACT4B,EADS,OAEUD,mBAAS,IAFnB,mBAErBE,EAFqB,KAERC,EAFQ,KAI5BC,qBAAU,WACRC,MAAM,uDACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACjC,GAAD,OAAgB4B,EAAc5B,QACrC,IAEH,IAIMoC,EAAmBpC,EAAWqC,QAAO,SAACnC,GAC1C,OAAOA,EAAUX,KACd+C,oBACAC,SAASV,EAAYS,wBAG1B,OAAQtC,EAAWwC,OAKjB,yBAAK9C,UAAU,MACb,wBAAIA,UAAU,YAAd,uBACA,kBAAC,EAAD,CAAWgB,aAjBQ,SAAC+B,GACtBX,EAAeW,EAAMC,OAAOC,UAkB1B,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAU3C,WAAYoC,MAG1B,4BAAQ1C,UAAU,MAAlB,+CAbF,yBAAKA,UAAU,MACb,wBAAIA,UAAU,MAAd,0BCjBckD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdC,OAAM,SAAArC,GACLsC,QAAQtC,MAAMA,EAAMuC,a","file":"static/js/main.e5aec7ec.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({ name, publisher, image }) => {\r\n  return (\r\n    <div className=\"tc bg-yellow dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n      <img\r\n        className=\"ba bw1 br4\"\r\n        alt=\"profile\"\r\n        src={image}\r\n        width=\"200\"\r\n        height=\"200\"\r\n      />\r\n      <div>\r\n        <h2 >{name}</h2>\r\n        <h3 className=\"mid-gray\">{publisher}</h3>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ characters }) => {\r\n  return (\r\n    <div>\r\n      {characters.map((character, i) => {\r\n        return (\r\n          <Card\r\n            key={i}\r\n            id={character.id}\r\n            name={character.name}\r\n            publisher={character.biography.publisher}\r\n            image={character.images.md}\r\n          />\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\nexport default CardList;\r\n","import React from 'react';\r\n\r\nconst SearchBox = ({ searchChange }) => {\r\n  return (\r\n    <div className=\"pa2\">\r\n      <input\r\n        className=\"pa3 b--black bg-lightest-blue br4 3px tc\"\r\n        type=\"search\"\r\n        placeholder=\"Search here\"\r\n        onChange={searchChange}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchBox;\r\n","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n  return (\r\n    <div\r\n      style={{\r\n        overflow: 'scroll',\r\n        height: '800px',\r\n      }}\r\n    >\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Scroll;\r\n","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      hasError: false,\r\n    };\r\n  }\r\n  componentDidCatch(error, info) {\r\n    this.state({ hasError: true });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasError) {\r\n      return (\r\n        <div>\r\n          <h1>Something wrong happened...</h1>\r\n        </div>\r\n      );\r\n    }\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundry;\r\n","import React, { useState, useEffect } from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\nimport './App.css';\r\n\r\nexport default function App() {\r\n  const [characters, setCharacters] = useState([]);\r\n  const [searchField, setSearchField] = useState('');\r\n\r\n  useEffect(() => {\r\n    fetch('https://akabab.github.io/superhero-api/api/all.json')\r\n      .then((response) => response.json())\r\n      .then((characters) => setCharacters(characters));\r\n  }, []);\r\n\r\n  const onSearchChange = (event) => {\r\n    setSearchField(event.target.value);\r\n  };\r\n\r\n  const filterCharacters = characters.filter((character) => {\r\n    return character.name\r\n      .toLocaleLowerCase()\r\n      .includes(searchField.toLocaleLowerCase());\r\n  });\r\n\r\n  return !characters.length ? (\r\n    <div className=\"tc\">\r\n      <h1 className=\"f2\">LOADING CHARACTERS...</h1>\r\n    </div>\r\n  ) : (\r\n    <div className=\"tc\">\r\n      <h1 className=\"f1 v-mid\">COMICS SUPER-HEROES</h1>\r\n      <SearchBox searchChange={onSearchChange} />\r\n\r\n      <ErrorBoundry>\r\n        <Scroll>\r\n          <CardList characters={filterCharacters} />\r\n        </Scroll>\r\n      </ErrorBoundry>\r\n      <footer className=\"f3\">All data and images from superhero-api.com</footer>\r\n    </div>\r\n  );\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'tachyons';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}